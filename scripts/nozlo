#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
import argparse
from pathlib import Path

from nozlo.nozlo import CHANNELS, Nozlo, SpecialLayer
from nozlo import __version__


LOG = logging.getLogger("nozlo")



def main():

    class LayerAction(argparse.Action):
        message = (
            "`{self.dest}` argument must be a positive integer, "
            "`first` or `last`.")

        def __call__(self, parser, namespace, values, option_string=None):
            if values == "first":
                values = SpecialLayer.FIRST
            elif values == "last":
                values = SpecialLayer.LAST
            else:
                try:
                    values = int(values)
                except ValueError:
                    raise argparse.ArgumentTypeError(self.message)

                if values < 0:
                    raise argparse.ArgumentTypeError(self.message)

            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser(
        description="""G-code viewer.""")

    parser.add_argument(
        "--verbose", "-v",
        action="count", default=0,
        help="Print verbose information for debugging.")
    parser.add_argument(
        "--quiet", "-q",
        action="count", default=0,
        help="Suppress warnings.")

    parser.add_argument(
        "--version", "-V",
        action="version",
        version=__version__)

    parser.add_argument(
        "--no-cache", "-C",
        action="store_true",
        help="Bypass model cache and previous settings.")

    parser.add_argument(
        "--channel", "-c",
        choices=CHANNELS,
        default="feedrate",
        help="Channel to display.")

    parser.add_argument(
        "--layer", "-l",
        action=LayerAction,
        help="Layer number to display, from 0 to n-1, or `first` or `last` to indicate the first layer containing the model or last layer.")
    parser.add_argument(
        "--single", "-s",
        action="store_true",
        help="Show only the single current layer.")

    parser.add_argument(
        "--ortho", "-o",
        action="store_true",
        help="Use orthographic projection.")

    parser.add_argument(
        "--aim", "-a",
        type=float,
        nargs=3,
        help="Aim coordinates for the camera.")
    parser.add_argument(
        "--yaw", "-Y",
        type=float,
        help="Camera yaw in degrees, starting in positive X and moving clockwise (looking down) around the aim point.")
    parser.add_argument(
        "--pitch", "-P",
        type=float,
        help="Camera pitch in degrees, positive puts the camera above the aim point.")
    parser.add_argument(
        "--dist", "-D",
        type=float,
        help="Camera distance in mm for perspective view. Camera frame in mm for orthographic view")

    parser.add_argument(
        "gcode",
        metavar="GCODE",
        type=Path,
        help="Path to G-code file.")

    args = parser.parse_args()

    level = (logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG)[
        max(0, min(3, 1 + args.verbose - args.quiet))]
    handler = logging.StreamHandler()

    for name in ("nozlo", "parser"):
        log = logging.getLogger(name)
        log.addHandler(handler)
        log.setLevel(level)

    app = Nozlo()
    app.load_model(args.gcode, cache=(not args.no_cache))
    app.channel = args.channel

    if args.layer:
        app.update_model_draw(layer=args.layer)
    if args.single:
        app.update_model_draw(single=args.single)

    if args.aim is not None:
        app.move_aim(args.aim)

    if args.ortho:
        app.ortho = True

    if args.dist is not None:
        app.distance = args.dist
        app.move_camera()

    if args.yaw is not None:
        app.yaw = 0
        app.move_camera(yaw=args.yaw)
    if args.pitch is not None:
        app.pitch = 0
        app.move_camera(pitch=args.pitch)

    app.run()



if __name__ == "__main__":
    main()
